name: "Run tests"
description: "Run tests"

inputs:
  # The defaults are based on the latest tested Anki release. Updates to them usually
  # only occur every few Anki releases, typically with months between them.
  # As a result, this should be a reasonable enough strategy to allow us to test
  # new Anki pre-releases without knowing the exact dependency set-up.
  python:
    description: "Python interpreter version"
    required: false
    default: 3.8.6
  anki:
    description: "Anki version. If set to 'latest', this will install latest (pre)-release."
    required: false
    default: "latest"
  pyqt:
    description: "PyQt widget toolkit version"
    required: false
    default: 5.14.2
  pyqtwebengine:
    description: "PyQt WebEngine version"
    required: false
    default: 5.14.0
  chrome:
    description: "Chrome version"
    required: false
    default: 77.0.3865.129
    # ^ determining the Chrome version used in an Anki release is difficult
    # to automate without an external service, so use the default for the current
    # PyQt version. Anki typically uses the same Qt major version across a full
    # release line, so this should be good enough for now.

runs:
  using: "composite"
  steps:
    - name: Checkout pytest-anki
      uses: actions/checkout@v2

    - name: "Set up environment"
      uses: ./.github/actions/setup_system
      with:
        python: ${{ inputs.python }}
        chrome: ${{ inputs.chrome }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.1.8
        virtualenvs-create: false

    - name: Set up pytest-anki
      shell: bash
      run: |
        make install

    - name: "Set up Anki"
      uses: ./.github/actions/setup_anki
      with:
        anki: ${{ inputs.anki }}
        pyqt: ${{ inputs.pyqt }}
        pyqtwebengine: ${{ inputs.pyqtwebengine }}

    - name: Run tests for Anki ${{ matrix.anki }}
      shell: bash
      run: |
        make test
